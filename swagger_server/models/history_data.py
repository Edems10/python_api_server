# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.history import History  # noqa: F401,E501
from swagger_server import util


class HistoryData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, symbol: str=None, predictions: List[History]=None):  # noqa: E501
        """HistoryData - a model defined in Swagger

        :param symbol: The symbol of this HistoryData.  # noqa: E501
        :type symbol: str
        :param predictions: The predictions of this HistoryData.  # noqa: E501
        :type predictions: List[History]
        """
        self.swagger_types = {
            'symbol': str,
            'predictions': List[History]
        }

        self.attribute_map = {
            'symbol': 'symbol',
            'predictions': 'predictions'
        }
        self._symbol = symbol
        self._predictions = predictions

    @classmethod
    def from_dict(cls, dikt) -> 'HistoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HistoryData of this HistoryData.  # noqa: E501
        :rtype: HistoryData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def symbol(self) -> str:
        """Gets the symbol of this HistoryData.


        :return: The symbol of this HistoryData.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this HistoryData.


        :param symbol: The symbol of this HistoryData.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def predictions(self) -> List[History]:
        """Gets the predictions of this HistoryData.


        :return: The predictions of this HistoryData.
        :rtype: List[History]
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions: List[History]):
        """Sets the predictions of this HistoryData.


        :param predictions: The predictions of this HistoryData.
        :type predictions: List[History]
        """
        if predictions is None:
            raise ValueError("Invalid value for `predictions`, must not be `None`")  # noqa: E501

        self._predictions = predictions
